ACCESS(2)                  Linux Programmer's Manual                 ACCESS(2)

NNAAMMEE
       access, faccessat - check user's permissions for a file

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>

       iinntt aacccceessss((ccoonnsstt cchhaarr **_p_a_t_h_n_a_m_e,, iinntt _m_o_d_e));;

       ##iinncclluuddee <<ffccnnttll..hh>>           /* Definition of AT_* constants */
       ##iinncclluuddee <<uunniissttdd..hh>>

       iinntt ffaacccceessssaatt((iinntt _d_i_r_f_d,, ccoonnsstt cchhaarr **_p_a_t_h_n_a_m_e,, iinntt _m_o_d_e,, iinntt _f_l_a_g_s));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ffaacccceessssaatt():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DDEESSCCRRIIPPTTIIOONN
       aacccceessss()  checks  whether the calling process can access the file _p_a_t_h_‐
       _n_a_m_e.  If _p_a_t_h_n_a_m_e is a symbolic link, it is dereferenced.

       The _m_o_d_e specifies the accessibility check(s) to be performed,  and  is
       either the value FF__OOKK, or a mask consisting of the bitwise OR of one or
       more of RR__OOKK, WW__OOKK, and XX__OOKK.  FF__OOKK tests  for  the  existence  of  the
       file.   RR__OOKK,  WW__OOKK,  and  XX__OOKK test whether the file exists and grants
       read, write, and execute permissions, respectively.

       The check is done using the calling process's _r_e_a_l UID and GID,  rather
       than the effective IDs as is done when actually attempting an operation
       (e.g., ooppeenn(2)) on the file.  Similarly, for the root user,  the  check
       uses the set of permitted capabilities rather than the set of effective
       capabilities; and for non-root users, the check uses an  empty  set  of
       capabilities.

       This  allows  set-user-ID  programs  and capability-endowed programs to
       easily determine  the  invoking  user's  authority.   In  other  words,
       aacccceessss()  does  not  answer  the  "can I read/write/execute this file?"
       question.  It answers a slightly different question: "(assuming  I'm  a
       setuid  binary)  can  _t_h_e  _u_s_e_r  _w_h_o _i_n_v_o_k_e_d _m_e read/write/execute this
       file?", which gives set-user-ID programs  the  possibility  to  prevent
       malicious  users  from causing them to read files which users shouldn't
       be able to read.

       If the calling process is privileged (i.e., its real UID is zero), then
       an XX__OOKK check is successful for a regular file if execute permission is
       enabled for any of the file owner, group, or other.

   ffaacccceessssaatt(())
       The ffaacccceessssaatt() system  call  operates  in  exactly  the  same  way  as
       aacccceessss(), except for the differences described here.

       If  the  pathname given in _p_a_t_h_n_a_m_e is relative, then it is interpreted
       relative to the directory referred to  by  the  file  descriptor  _d_i_r_f_d
       (rather  than  relative to the current working directory of the calling
       process, as is done by aacccceessss() for a relative pathname).

       If _p_a_t_h_n_a_m_e is relative and _d_i_r_f_d is the special value  AATT__FFDDCCWWDD,  then
       _p_a_t_h_n_a_m_e  is  interpreted  relative to the current working directory of
       the calling process (like aacccceessss()).

       If _p_a_t_h_n_a_m_e is absolute, then _d_i_r_f_d is ignored.

       _f_l_a_g_s is constructed by ORing together zero or more  of  the  following
       values:

       AATT__EEAACCCCEESSSS
              Perform  access  checks  using the effective user and group IDs.
              By default, ffaacccceessssaatt() uses the real IDs (like aacccceessss()).

       AATT__SSYYMMLLIINNKK__NNOOFFOOLLLLOOWW
              If _p_a_t_h_n_a_m_e is a symbolic link, do not dereference  it:  instead
              return information about the link itself.

       See ooppeennaatt(2) for an explanation of the need for ffaacccceessssaatt().

RREETTUURRNN VVAALLUUEE
       On  success (all requested permissions granted, or _m_o_d_e is FF__OOKK and the
       file exists), zero is returned.  On error (at least  one  bit  in  _m_o_d_e
       asked  for  a  permission  that is denied, or _m_o_d_e is FF__OOKK and the file
       does not exist, or some other error  occurred),  -1  is  returned,  and
       _e_r_r_n_o is set appropriately.

EERRRROORRSS
       aacccceessss() and ffaacccceessssaatt() shall fail if:

       EEAACCCCEESS The requested access would be denied to the file, or search per‐
              mission is denied for one of the directories in the path  prefix
              of _p_a_t_h_n_a_m_e.  (See also ppaatthh__rreessoolluuttiioonn(7).)

       EELLOOOOPP  Too many symbolic links were encountered in resolving _p_a_t_h_n_a_m_e.

       EENNAAMMEETTOOOOLLOONNGG
              _p_a_t_h_n_a_m_e is too long.

       EENNOOEENNTT A component of _p_a_t_h_n_a_m_e does not exist or is a dangling symbolic
              link.

       EENNOOTTDDIIRR
              A component used as a directory in _p_a_t_h_n_a_m_e is not, in  fact,  a
              directory.

       EERROOFFSS  Write  permission  was  requested  for  a  file  on  a read-only
              filesystem.

       aacccceessss() and ffaacccceessssaatt() may fail if:

       EEFFAAUULLTT _p_a_t_h_n_a_m_e points outside your accessible address space.

       EEIINNVVAALL _m_o_d_e was incorrectly specified.

       EEIIOO    An I/O error occurred.

       EENNOOMMEEMM Insufficient kernel memory was available.

       EETTXXTTBBSSYY
              Write access was requested to an executable which is being  exe‐
              cuted.

       The following additional errors can occur for ffaacccceessssaatt():

       EEBBAADDFF  _d_i_r_f_d is not a valid file descriptor.

       EEIINNVVAALL Invalid flag specified in _f_l_a_g_s.

       EENNOOTTDDIIRR
              _p_a_t_h_n_a_m_e is relative and _d_i_r_f_d is a file descriptor referring to
              a file other than a directory.

VVEERRSSIIOONNSS
       ffaacccceessssaatt() was added to Linux in kernel 2.6.16;  library  support  was
       added to glibc in version 2.4.

CCOONNFFOORRMMIINNGG TTOO
       aacccceessss(): SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.

       ffaacccceessssaatt(): POSIX.1-2008.

NNOOTTEESS
       WWaarrnniinngg:  Using  these  calls  to check if a user is authorized to, for
       example, open a file before actually doing so using ooppeenn(2)  creates  a
       security  hole,  because the user might exploit the short time interval
       between checking and opening the file to manipulate it.  FFoorr tthhiiss  rreeaa‐‐
       ssoonn,,  tthhee  uussee  ooff tthhiiss ssyysstteemm ccaallll sshhoouulldd bbee aavvooiiddeedd.  (In the example
       just described, a safer alternative would be to temporarily switch  the
       process's effective user ID to the real ID and then call ooppeenn(2).)

       aacccceessss()  always dereferences symbolic links.  If you need to check the
       permissions on a symbolic link, use ffaacccceessssaatt() with the  flag  AATT__SSYYMM‐‐
       LLIINNKK__NNOOFFOOLLLLOOWW.

       These  calls  return  an  error  if  any of the access types in _m_o_d_e is
       denied, even if some of the other access types in _m_o_d_e are permitted.

       If the calling process has appropriate privileges (i.e., is superuser),
       POSIX.1-2001  permits an implementation to indicate success for an XX__OOKK
       check even if none of the execute file permission bits are set.   Linux
       does not do this.

       A file is accessible only if the permissions on each of the directories
       in the path prefix of _p_a_t_h_n_a_m_e grant search (i.e., execute) access.  If
       any directory is inaccessible, then the aacccceessss() call fails, regardless
       of the permissions on the file itself.

       Only access bits are checked, not the file type  or  contents.   There‐
       fore,  if  a  directory is found to be writable, it probably means that
       files can be created in the directory, and not that the  directory  can
       be  written  as a file.  Similarly, a DOS file may be found to be "exe‐
       cutable," but the eexxeeccvvee(2) call will still fail.

       These calls may not work correctly on NFSv2 filesystems with  UID  map‐
       ping enabled, because UID mapping is done on the server and hidden from
       the client, which checks permissions.  (NFS versions 3 and higher  per‐
       form  the  check  on  the  server.)  Similar problems can occur to FUSE
       mounts.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The raw ffaacccceessssaatt() system call takes only the first  three  arguments.
       The  AATT__EEAACCCCEESSSS  and AATT__SSYYMMLLIINNKK__NNOOFFOOLLLLOOWW flags are actually implemented
       within the glibc wrapper function for ffaacccceessssaatt().  If either of  these
       flags  is  specified,  then  the wrapper function employs ffssttaattaatt(2) to
       determine access permissions.

   GGlliibbcc nnootteess
       On older kernels where ffaacccceessssaatt() is unavailable (and when the AATT__EEAACC‐‐
       CCEESSSS  and AATT__SSYYMMLLIINNKK__NNOOFFOOLLLLOOWW flags are not specified), the glibc wrap‐
       per function falls back to the use of aacccceessss().   When  _p_a_t_h_n_a_m_e  is  a
       relative  pathname,  glibc  constructs a pathname based on the symbolic
       link in _/_p_r_o_c_/_s_e_l_f_/_f_d that corresponds to the _d_i_r_f_d argument.

BBUUGGSS
       In kernel 2.4 (and earlier) there is some strangeness in  the  handling
       of  XX__OOKK  tests for superuser.  If all categories of execute permission
       are disabled for a nondirectory file, then the only aacccceessss() test  that
       returns  -1  is when _m_o_d_e is specified as just XX__OOKK; if RR__OOKK or WW__OOKK is
       also specified in _m_o_d_e, then aacccceessss() returns 0 for such files.   Early
       2.6 kernels (up to and including 2.6.3) also behaved in the same way as
       kernel 2.4.

       In kernels before  2.6.20,  these  calls  ignored  the  effect  of  the
       MMSS__NNOOEEXXEECC  flag  if  it was used to mmoouunntt(2) the underlying filesystem.
       Since kernel 2.6.20, the MMSS__NNOOEEXXEECC flag is honored.

SSEEEE AALLSSOO
       cchhmmoodd(2), cchhoowwnn(2), ooppeenn(2),  sseettggiidd(2),  sseettuuiidd(2),  ssttaatt(2),  eeuuiiddaacc‐‐
       cceessss(3), ccrreeddeennttiiaallss(7), ppaatthh__rreessoolluuttiioonn(7), ssyymmlliinnkk(7)

CCOOLLOOPPHHOONN
       This  page  is  part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       https://www.kernel.org/doc/man-pages/.

Linux                             2016-03-15                         ACCESS(2)
